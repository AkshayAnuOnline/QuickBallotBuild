name: Version and Build/release

on:
  push:
    tags:
      - 'v*.*.*'  # Only run on version tags
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name (e.g., v1.0.24)'
        required: true
        default: 'v1.0.24'

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.extract_version.outputs.VERSION }} --no-git-tag-version

      - name: Commit and push version update
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json
          git commit -m "Update version to ${{ steps.extract_version.outputs.VERSION }}"
          git config pull.rebase false
          git pull origin main
          git push origin HEAD:main --force

  build-mac:
    needs: update-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and Publish macOS
        run: |
          npm run electron:publish -- --mac
          echo "Build completed. Checking for release creation..."
          sleep 30  # Wait for release to be created
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify release creation
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Checking for release with tag: $TAG_NAME"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id, .tag_name, .draft'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: release/*.{dmg,zip}

  build-win:
    needs: update-version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Windows build dependencies
        run: |
          npm install --global --production windows-build-tools
          npm install --global node-gyp

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Windows dependencies for canvas
        run: |
          choco install -y python3
          choco install -y gtk-runtime
          choco install -y libjpeg-turbo

      - name: Install dependencies
        run: |
          npm ci
          npm rebuild canvas --update-binary

      - name: Build and Publish Windows
        run: |
          npm run electron:publish -- --win
          echo "Build completed. Checking for release creation..."
          sleep 30  # Wait for release to be created
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify release creation
        run: |
          $TAG_NAME = "${{ github.ref }}".Replace("refs/tags/", "")
          echo "Checking for release with tag: $TAG_NAME"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id, .tag_name, .draft'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: release/*.{exe,msi}

  build-linux:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and Publish Linux
        run: |
          npm run electron:publish -- --linux
          echo "Build completed. Checking for release creation..."
          sleep 30  # Wait for release to be created
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify release creation
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Checking for release with tag: $TAG_NAME"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id, .tag_name, .draft'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            release/*.AppImage
            release/*.deb
