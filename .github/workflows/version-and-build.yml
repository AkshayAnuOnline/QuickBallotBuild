name: Version and Build/release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name (e.g., v1.0.24)'
        required: true
        default: 'v1.0.24'

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Extract version from package.json
        id: extract_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          TAG_NAME=v$VERSION
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -f ${{ steps.extract_version.outputs.TAG_NAME }}
          git push origin ${{ steps.extract_version.outputs.TAG_NAME }}

  build-mac:
    needs: update-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Delete existing draft release if exists
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          TAG_NAME=v$(node -p "require('./package.json').version")
          echo "Checking for existing release with tag: $TAG_NAME"
          RELEASE_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Deleting existing release with ID: $RELEASE_ID"
            curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          else
            echo "No existing release found with tag: $TAG_NAME"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Show package.json version
        run: |
          echo "Current package.json version: $(node -p "require('./package.json').version")"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Current tag: $TAG_NAME"
          VERSION=${TAG_NAME#v}
          echo "Extracted version: $VERSION"

      - name: Build and Publish macOS
        run: |
          npm run electron:publish -- --mac
          echo "Build completed. Checking for release creation..."
          sleep 30  # Wait for release to be created
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify release creation
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Checking for release with tag: $TAG_NAME"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id, .tag_name, .draft'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: release/*.{dmg,zip}

  build-win:
    needs: update-version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Windows dependencies for canvas
        run: |
          choco install -y python3
          choco install -y gtk-runtime
          choco install -y libjpeg-turbo
        shell: bash

      - name: Install dependencies
        run: |
          npm ci
          npm rebuild canvas --update-binary
        shell: bash

      - name: Show package.json version
        run: |
          echo "Current package.json version: $(node -p "require('./package.json').version")"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Current tag: $TAG_NAME"
          VERSION=${TAG_NAME#v}
          echo "Extracted version: $VERSION"
        shell: bash

      - name: Build and Publish Windows
        run: |
          npm run electron:publish -- --win
          echo "Build completed. Checking for release creation..."
          sleep 30  # Wait for release to be created
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash

      - name: Verify release creation
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Checking for release with tag: $TAG_NAME"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id, .tag_name, .draft'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: release/*.{exe,msi}

  build-linux:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Show package.json version
        run: |
          echo "Current package.json version: $(node -p "require('./package.json').version")"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Current tag: $TAG_NAME"
          VERSION=${TAG_NAME#v}
          echo "Extracted version: $VERSION"

      - name: Build and Publish Linux
        run: |
          npm run electron:publish -- --linux
          echo "Build completed. Checking for release creation..."
          sleep 30  # Wait for release to be created
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify release creation
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Checking for release with tag: $TAG_NAME"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id, .tag_name, .draft'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            release/*.AppImage
            release/*.deb
