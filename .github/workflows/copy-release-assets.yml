name: Copy Release Assets to Public Repository

# This workflow can be manually triggered to copy release assets from this private repository
# to the public repository for distribution

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag of the release to copy assets from (e.g., v1.0.14)'
        required: true
        default: 'latest'
      target_release_tag:
        description: 'Tag to use for the release in the public repository (leave empty to use same tag)'
        required: false

jobs:
  copy-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Get release information
        id: get_release
        run: |
          if [ "${{ github.event.inputs.release_tag }}" = "latest" ]; then
            RELEASE_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          else
            RELEASE_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.release_tag }}")
          fi
          
          echo "release_info=$RELEASE_INFO" >> $GITHUB_OUTPUT
          RELEASE_ID=$(echo $RELEASE_INFO | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          RELEASE_TAG=$(echo $RELEASE_INFO | jq -r '.tag_name')
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          RELEASE_NAME=$(echo $RELEASE_INFO | jq -r '.name')
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          RELEASE_BODY=$(echo $RELEASE_INFO | jq -r '.body')
          echo "release_body=$RELEASE_BODY" >> $GITHUB_OUTPUT

      - name: Download release assets
        run: |
          mkdir -p assets
          cd assets
          
          # Get list of assets
          ASSETS_URL="https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }}/assets"
          ASSET_LIST=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" "$ASSETS_URL")
          
          # Download each asset
          echo $ASSET_LIST | jq -c '.[]' | while read asset; do
            ASSET_NAME=$(echo $asset | jq -r '.name')
            ASSET_URL=$(echo $asset | jq -r '.url')
            
            # Skip blockmap and yml files
            if [[ ! "$ASSET_NAME" =~ \.(blockmap|yml)$ ]]; then
              echo "Downloading $ASSET_NAME"
              curl -L -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                -H "Accept: application/octet-stream" \
                "$ASSET_URL" -o "$ASSET_NAME"
            else
              echo "Skipping $ASSET_NAME (blockmap or yml file)"
            fi
          done

      - name: Upload assets to public repository
        run: |
          cd assets
          
          # Determine target tag
          if [ -n "${{ github.event.inputs.target_release_tag }}" ]; then
            TARGET_TAG="${{ github.event.inputs.target_release_tag }}"
          else
            TARGET_TAG="${{ steps.get_release.outputs.release_tag }}"
          fi
          
          # Create release in public repository if it doesn't exist
          PUBLIC_REPO="AkshayAnuOnline/quikballot"
          
          # Check if release already exists
          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$PUBLIC_REPO/releases/tags/$TARGET_TAG")
          
          if [ "$RELEASE_EXISTS" = "404" ]; then
            # Create new release
            RELEASE_DATA=$(jq -n \
              --arg tag "$TARGET_TAG" \
              --arg name "${{ steps.get_release.outputs.release_name }}" \
              --arg body "${{ steps.get_release.outputs.release_body }}" \
              '{tag_name: $tag, name: $name, body: $body, draft: false, prerelease: false}')
            
            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$RELEASE_DATA" \
              "https://api.github.com/repos/$PUBLIC_REPO/releases")
            
            PUBLIC_RELEASE_ID=$(echo $RELEASE_RESPONSE | jq -r '.id')
          else
            # Get existing release ID
            PUBLIC_RELEASE_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/$PUBLIC_REPO/releases/tags/$TARGET_TAG")
            PUBLIC_RELEASE_ID=$(echo $PUBLIC_RELEASE_INFO | jq -r '.id')
          fi
          
          # Upload each asset
          for file in *; do
            if [ -f "$file" ]; then
              echo "Uploading $file to public repository"
              curl -s -X POST \
                -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @$file \
                "https://uploads.github.com/repos/$PUBLIC_REPO/releases/$PUBLIC_RELEASE_ID/assets?name=$(basename $file)"
            fi
          done
          
          echo "Assets copied successfully to public repository release $TARGET_TAG"
