name: Copy Release Assets to Public Repository

# This workflow can be manually triggered to copy release assets from this private repository
# to the public repository for distribution

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag of the release to copy assets from (e.g., v1.0.14)'
        required: true
        default: 'v1.0.14'
      target_release_tag:
        description: 'Tag to use for the release in the public repository (leave empty to use same tag)'
        required: false
      create_release_if_missing:
        description: 'Create release in public repo if it does not exist'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  copy-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Get release information
        id: get_release
        run: |
          echo "Getting release information for tag: ${{ github.event.inputs.release_tag }}"
          
          # Get all releases and filter by tag (to include draft releases)
          ALL_RELEASES=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100")
          
          # Filter for the specific tag
          RELEASE_INFO=$(echo "$ALL_RELEASES" | jq -r --arg TAG "${{ github.event.inputs.release_tag }}" '.[] | select(.tag_name == $TAG) | .')
          
          # Check if we got valid release info
          if echo "$RELEASE_INFO" | jq -e .id &>/dev/null; then
            echo "Successfully retrieved release information"
          else
            echo "Error: Failed to retrieve release information for tag ${{ github.event.inputs.release_tag }}"
            echo "Response: $ALL_RELEASES"
            exit 1
          fi
          
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          
          DRAFT=$(echo "$RELEASE_INFO" | jq -r '.draft')
          echo "draft=$DRAFT" >> $GITHUB_OUTPUT
          
          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
          echo "release_body=$RELEASE_BODY" >> $GITHUB_OUTPUT
          
          echo "Release ID: $RELEASE_ID"
          echo "Draft: $DRAFT"
          echo "Tag: $TAG_NAME"
          echo "Release Name: $RELEASE_NAME"
          
          echo "Assets for this release:"
          curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | \
            jq -r '.[] | "- \(.name) (\(.size) bytes)"'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Copy assets to public repository
        run: |
          # Get list of assets from source release
          ASSETS_URL="https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }}/assets"
          echo "Fetching assets from: $ASSETS_URL"
          ASSET_LIST=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" "$ASSETS_URL")
          
          # Check if we got valid asset list
          if echo "$ASSET_LIST" | jq -e . &>/dev/null; then
            echo "Successfully retrieved asset list"
          else
            echo "Error: Failed to retrieve asset list"
            echo "Response: $ASSET_LIST"
            exit 1
          fi
          
          # Determine target tag
          if [ -z "${{ github.event.inputs.target_release_tag }}" ]; then
            TARGET_TAG="${{ steps.get_release.outputs.tag_name }}"
          else
            TARGET_TAG="${{ github.event.inputs.target_release_tag }}"
          fi
          
          echo "Target tag for public repository: $TARGET_TAG"
          
          # Create release in public repository if it doesn't exist
          PUBLIC_REPO="AkshayAnuOnline/quikballot"
          
          # Check if release already exists
          echo "Checking if release $TARGET_TAG exists in $PUBLIC_REPO"
          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/$PUBLIC_REPO/releases/tags/$TARGET_TAG")
          
          echo "Release exists check returned HTTP status: $RELEASE_EXISTS"
          
          # Check if we should create the release if it doesn't exist
          CREATE_RELEASE="${{ github.event.inputs.create_release_if_missing }}"
          
          if [ "$RELEASE_EXISTS" = "404" ]; then
            if [ "$CREATE_RELEASE" = "true" ]; then
              echo "Creating new release $TARGET_TAG in $PUBLIC_REPO"
              # Create new release
              RELEASE_DATA=$(jq -n \
                --arg tag "$TARGET_TAG" \
                --arg name "${{ steps.get_release.outputs.release_name }}" \
                --arg body "${{ steps.get_release.outputs.release_body }}" \
                '{tag_name: $tag, name: $name, body: $body, draft: false, prerelease: false}')
              
              RELEASE_RESPONSE=$(curl -s -X POST \
                -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$RELEASE_DATA" \
                "https://api.github.com/repos/$PUBLIC_REPO/releases")
              
              # Check if release creation was successful
              if echo "$RELEASE_RESPONSE" | jq -e .id &>/dev/null; then
                echo "Successfully created release"
              else
                echo "Error: Failed to create release"
                echo "Response: $RELEASE_RESPONSE"
                exit 1
              fi
              
              PUBLIC_RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
              echo "Created release with ID: $PUBLIC_RELEASE_ID"
            else
              echo "Release $TARGET_TAG does not exist and create_release_if_missing is false. Exiting."
              exit 1
            fi
          else
            echo "Release $TARGET_TAG already exists, getting release ID"
            # Get existing release ID
            PUBLIC_RELEASE_INFO=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/$PUBLIC_REPO/releases/tags/$TARGET_TAG")
            
            # Check if we got valid release info
            if echo "$PUBLIC_RELEASE_INFO" | jq -e .id &>/dev/null; then
              echo "Successfully retrieved existing release information"
            else
              echo "Error: Failed to retrieve existing release information"
              echo "Response: $PUBLIC_RELEASE_INFO"
              exit 1
            fi
            
            PUBLIC_RELEASE_ID=$(echo "$PUBLIC_RELEASE_INFO" | jq -r '.id')
            echo "Existing release ID: $PUBLIC_RELEASE_ID"
          fi
          
          # Copy each asset by downloading first and then uploading
          echo "Copying assets to public repository release $PUBLIC_RELEASE_ID"
          # Create temporary directory for assets
          TEMP_DIR="$(mktemp -d)"
          
          # Counter for copied assets
          COPIED_ASSETS=0
          
          # Process each asset
          echo "$ASSET_LIST" | jq -c '.[]' | while IFS= read -r asset; do
            ASSET_NAME=$(echo "$asset" | jq -r '.name')
            ASSET_URL=$(echo "$asset" | jq -r '.url')
            ASSET_SIZE=$(echo "$asset" | jq -r '.size')
            
            # Only copy installer files (skip blockmap, yml, and other non-installer files)
            if [[ $ASSET_NAME =~ \.(dmg|exe|msi|AppImage|deb)$ ]]; then
              echo "Copying installer $ASSET_NAME ($ASSET_SIZE bytes) to public repository"
              
              # Download asset to temporary file
              TEMP_FILE="$TEMP_DIR/$ASSET_NAME"
              curl -s -L -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                -H "Accept: application/octet-stream" \
                "$ASSET_URL" -o "$TEMP_FILE"
              
              # Check if download was successful
              if [ -f "$TEMP_FILE" ]; then
                # Upload asset to public repository
                UPLOAD_RESPONSE=$(curl -s -X POST \
                  -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary "@$TEMP_FILE" \
                  "https://uploads.github.com/repos/$PUBLIC_REPO/releases/$PUBLIC_RELEASE_ID/assets?name=$ASSET_NAME")
                
                # Check if upload was successful
                if echo "$UPLOAD_RESPONSE" | jq -e .id &>/dev/null; then
                  echo "Successfully uploaded $ASSET_NAME"
                  COPIED_ASSETS=$((COPIED_ASSETS + 1))
                else
                  echo "Error uploading $ASSET_NAME: $UPLOAD_RESPONSE"
                fi
              else
                echo "Error downloading $ASSET_NAME"
              fi
              
              # Clean up temporary file
              if [ -f "$TEMP_FILE" ]; then rm "$TEMP_FILE"; fi
            else
              echo "Skipping non-installer file: $ASSET_NAME"
            fi
          done
          
          echo "Finished copying assets. Total installer files copied: $COPIED_ASSETS"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      - name: Cleanup temporary assets
        run: |
          # Clean up temporary directory
          echo "Note: Temporary directory is automatically cleaned up by the runner"
          echo "Manual cleanup not required in GitHub Actions"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
